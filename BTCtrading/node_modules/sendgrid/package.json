{
  "author": {
    "name": "SendGrid",
    "email": "info@sendgrid.com",
    "url": "sendgrid.com"
  },
  "contributors": [
    {
      "name": "Kyle Partridge",
      "email": "kyle.partridge@sendgrid.com"
    },
    {
      "name": "David Tomberlin",
      "email": "david.tomberlin@sendgrid.com"
    },
    {
      "name": "Swift",
      "email": "swift@sendgrid.com"
    },
    {
      "name": "Brandon West",
      "email": "brandon.west@sendgrid.com"
    },
    {
      "name": "Scott Motte",
      "email": "scott.motte@sendgrid.com"
    }
  ],
  "name": "sendgrid",
  "description": "Official SendGrid NodeJS library.",
  "version": "1.2.1",
  "homepage": "http://sendgrid.com",
  "repository": {
    "type": "git",
    "url": "git://github.com/sendgrid/sendgrid-nodejs.git"
  },
  "engines": {
    "node": ">= 0.4.7"
  },
  "dependencies": {
    "mime": "1.2.9",
    "request": "2.40.0",
    "lodash": "2.0.0",
    "smtpapi": "1.0.3"
  },
  "devDependencies": {
    "dotenv": "0.0.2",
    "mocha": ">= 0.9.0",
    "chai": ">= 0.1.6",
    "nock": "~0.16.0",
    "sinon": "~1.6.0"
  },
  "scripts": {
    "test": "mocha --grep '#skip' --invert",
    "skipped": "mocha --grep '#skip'"
  },
  "optionalDependencies": {},
  "readme": "# Sendgrid-nodejs\n\nThis nodejs module allows you to quickly and easily send emails through SendGrid using [nodejs](http://nodejs.org/).\n\n[![BuildStatus](https://travis-ci.org/sendgrid/sendgrid-nodejs.png?branch=master)](https://travis-ci.org/sendgrid/sendgrid-nodejs)\n[![NPM version](https://badge.fury.io/js/sendgrid.png)](http://badge.fury.io/js/sendgrid)\n\n```javascript\nvar sendgrid  = require('sendgrid')(api_user, api_key);\nsendgrid.send({\n  to:       'example@example.com',\n  from:     'other@example.com',\n  subject:  'Hello World',\n  text:     'My first email through SendGrid.'\n}, function(err, json) {\n  if (err) { return console.error(err); }\n  console.log(json);\n});\n```\n\n## Installation\n\nThe following recommended installation requires [npm](https://npmjs.org/). If you are unfamiliar with npm, see the [npm docs](https://npmjs.org/doc/). Npm comes installed with Node.js since node version 0.8.x therefore you likely already have it.\n\nAdd the following to your `package.json` file:\n\n```json\n{\n  ...\n  \"dependencies\": {\n    ...\n    \"sendgrid\": \"1.1.1\"\n  }\n}\n```\n\nInstall sendgrid-nodejs and its dependencies:\n\n```bash\nnpm install\n```\n\n### Alternative Installation\n\nYou can also install sendgrid locally with the following command:\n\n```bash\nnpm install sendgrid\n```\n\n## Example App\n\nThere is a [sendgrid-nodejs-example app](https://github.com/sendgrid/sendgrid-nodejs-example) to help jumpstart your development.\n\n## Usage\n\nTo begin using this library, initialize the SendGrid object with your SendGrid credentials.\n\n```javascript\nvar sendgrid  = require('sendgrid')(api_user, api_key);\n```\n\nCreate a new JavaScript object with your message details.\n\n```javascript\nvar payload   = {\n  to      : 'to@example.com',\n  from    : 'from@other.com',\n  subject : 'Saying Hi',\n  text    : 'This is my first email through SendGrid'\n}\n```\n\nSend it.\n\n```javascript\nsendgrid.send(payload, function(err, json) {\n  if (err) { console.error(err); }\n  console.log(json);\n});\n```\n\n### Email\n\nEmail helps you more powerfully prepare your message to be sent.\n\n\nTo get started create an Email object where `params` is a javascript object. You can pass in as much or as little to `params` as you want.\n\n```javascript\nvar sendgrid  = require('sendgrid')(api_user, api_key);\nvar email     = new sendgrid.Email(params);\n```\n\n#### Sample\n\nHere is a sample for using it.\n\n```javascript\nvar sendgrid  = require('sendgrid')(api_user, api_key);\nvar email     = new sendgrid.Email({\n  to:       'foo@bar.com',\n  from:     'you@yourself.com',\n  subject:  'Subject goes here',\n  text:     'Hello world'\n});\nsendgrid.send(email, function(err, json) {\n  if (err) { return console.error(err); }\n  console.log(json);\n});\n```\n\n#### Available params\n\n```javascript\nvar params = {\n  smtpapi:  new sendgrid.smtpapi(),\n  to:       [],\n  toname:   [],\n  from:     '',\n  fromname: '',\n  subject:  '',\n  text:     '',\n  html:     '',\n  bcc:      [],\n  replyto:  '',\n  date:     new Date(),\n  files: [\n    {\n      filename:     '',           // required only if file.content is used.\n      contentType:  '',           // optional\n      cid:          '',           // optional, used to specify cid for inline content\n      path:         '',           //\n      url:          '',           // == One of these three options is required\n      content:      ('' | Buffer) //\n    }\n  ],\n  file_data:  {},\n  headers:    {}\n};\n```\n\nNOTE: anything that is available in the Email constructor is available for use in the `sendgrid.send` function.\n\n#### Setting params\n\nYou can set params like you would for any standard JavaScript object.\n\n```javascript\nvar sendgrid  = require('sendgrid')(api_user, api_key);\nvar email     = new sendgrid.Email({to: 'person@email.com'});\nemail.to      = \"different@email.com\";\nemail.replyto = \"reply-here@email.com\";\nemail.subject = \"This is a subject\";\n```\n\n#### addTo\n\nYou can add one or multiple TO addresses using `addTo`.\n\n```javascript\nvar email     = new sendgrid.Email(); \nemail.addTo('foo@bar.com');\nemail.addTo('another@another.com');\nsendgrid.send(email, function(err, json) { });\n```\n\nNOTE: This is different than setting an array on `to`. The array on `to` will show everyone the to addresses it was sent to. Using addTo will not. Usually, you'll want to use `addTo`.  \n\n#### setFrom\n\n```javascript\nvar email     = new sendgrid.Email(); \nemail.setFrom('foo@bar.com');\nsendgrid.send(email, function(err, json) { });\n```\n\n#### setSubject\n\n```javascript\nvar email     = new sendgrid.Email(); \nemail.setSubject('Some subject');\nsendgrid.send(email, function(err, json) { });\n```\n\n#### setText\n\n```javascript\nvar email     = new sendgrid.Email(); \nemail.setText('Some text');\nsendgrid.send(email, function(err, json) { });\n```\n\n#### setHtml\n\n```javascript\nvar email     = new sendgrid.Email(); \nemail.setHtml('<h1>Some html</h1>');\nsendgrid.send(email, function(err, json) { });\n```\n\n#### addHeader\n\nYou can add custom headers. This will ADD rather than SET headers.\n\n```javascript\nvar email     = new sendgrid.Email(); \nemail.setHeaders({full: 'hearts'});   // headers = {full: 'hearts'}\nemail.addHeader('spin', 'attack');   // headers = {full: 'hearts', spin: 'attack'}\nemail.addHeader('mask', 'salesman'); // headers = {full: 'hearts', spin: 'attack', mask: 'salesman'}\nsendgrid.send(email, function(err, json) { });\n```\n\n#### setHeaders\n\nYou can set custom headers. \n\n```javascript\nvar email     = new sendgrid.Email(); \nemail.setHeaders({full: 'hearts'});   // headers = {full: 'hearts'}\nemail.setHeaders({mask: 'salesman'}); // headers = {mask: 'salesman'}\nsendgrid.send(email, function(err, json) { });\n```\n\n#### addSubstitution\n\n```javascript\nvar email     = new sendgrid.Email();\nemail.addSubstitution('keep', 'secret'); // sub = {keep: ['secret']}\nemail.addSubstitution('other', ['one', 'two']);   // sub = {keep: ['secret'], other: ['one', 'two']}\n```\n\n#### setSubstitutions\n\n```javascript\nvar email     = new sendgrid.Email();\nemail.setSubstitutions({keep: ['secret'], other: ['one', 'two']}); // sub = {keep: ['secret'], other: ['one', 'two']});\n```\n\n#### addSection\n\n```javascript\nvar email     = new sendgrid.Email();\nemail.addSection({'-charge-': 'This ship is useless.'}); // section = {'-charge-': 'This ship is useless.'}\n```\n\n#### setSections \n\n```javascript\nvar email     = new sendgrid.Email();\nemail.setSections({'-charge-': 'This ship is useless.'}); // section = {'-charge-': 'This ship is useless.'}\n```\n\n#### addUniqueArg\n\n```javascript\nvar email     = new sendgrid.Email();\nemail.setUniqueArg({cow: 'chicken'}); // unique_args = {cow: 'chicken'}\nemail.addUniqueArg({cat: 'dog'});     // unique_args = {cow: 'chicken', cat: 'dog'}\n```\n\n#### setUniqueArgs\n\n```javascript\nvar email     = new sendgrid.Email();\nemail.setUniqueArgs({cow: 'chicken'}); // unique_args = {cow: 'chicken'}\nemail.setUniqueArgs({dad: 'proud'});   // unique_args = {dad: 'proud'}\n```\n\n#### addCategory\n\n```javascript\nvar email     = new sendgrid.Email();\nemail.addCategory('tactics');        // category = ['tactics']\nemail.addCategory('advanced');       // category = ['tactics', 'advanced']\n```\n\n#### setCategories\n\n```javascript\nvar email     = new sendgrid.Email();\nemail.setCategories(['tactics']);        // category = ['tactics']\nemail.setCategories(['snowball-fight']); // category = ['snowball-fight']\n```\n\n#### addFilter\n\nAlternatively, you can add filter settings one at a time.\n\n```javascript\nvar email     = new sendgrid.Email();\nemail.addFilter('footer', 'enable', 1);\nemail.addFilter('footer', 'text/html', '<strong>boo</strong>');\n```\n\n#### setFilters\n\nYou can set a filter using an object literal.\n\n```javascript\nvar email     = new sendgrid.Email();\nemail.setFilters({\n  'footer': {\n    'setting': {\n      'enable': 1,\n      'text/plain': 'You can haz footers!'\n    }\n  }\n});\n```\n\n#### addFile\n\nYou can add files directly from content in memory. It will try to guess the contentType based on the filename.\n\n```javascript\nemail.addFile({\n  filename: 'secret.txt',\n  content:  new Buffer('You will never know....')\n});\n```\n\nYou can add files directly from a url. It will try to guess the contentType based on the filename.\n\n```javascript\nemail.addFile({\n  filename: 'icon.jpg',\n  url: 'http://i.imgur.com/2fDh8.jpg'\n});\n```\n\nYou can add files from a path on the filesystem. It will try to grap the filename and contentType from the path.\n\n```javascript\nemail.addFile({\n  path: '../files/resume.txt'\n});\n```\n\nYou can tag files for use as inline HTML content. It will mark the file for inline disposition using the specified \"cid\".\n\n```javascript\nemail.addFile({\n  cid: 'the_logo',           // should match cid value in html\n  path: '../files/logo.png'\n});\nemail.addHtml('<div>Our logo:<img src=\"cid:the_logo\"></div>');\n```\n\n## Options\n\n### Changing URL\nYou may change the URL sendgrid-nodejs uses to send email by supplying various parameters to `options`, all parameters are optional:\n\n```javascript\nvar sendgrid = require('sendgrid')('username', 'password', { \"protocol\" : \"http\", \"host\" : \"sendgrid.org\", \"endpoint\" : \"/send\", \"port\" : \"80\" });\n```\n\nA full URI may also be provided:\n\n```javascript\nvar sendgrid = require('sendgrid')('username', 'password', { \"uri\" : \"http://sendgrid.org:80/send\" });\n```\n\n### Request\n\nsendgrid-nodejs uses the node request module. You can pass in options\nto be merged. This enables you to use your own https.Agent, node-tunnel\nor the request proxy url. Please note that sendgrid requires https.\n\n```javascript\nvar sendgrid = require('sendgrid')('username', 'password', {\nproxy: \"http://localproxy:3128\" });\n```\n\nor\n\n```javascript\nvar https = require('https');\nvar agent = new https.Agent();\n// Set Max Sockets to 500\nagent.maxSockets = 500;\n\nvar sendgrid = require('sendgrid')('username', 'password', { web: {\npool: agent } });\n```\n\n## Issues\nWhen filing an issue please include your ```package.json``` and the output of\n```npm ls sendgrid``` to help us isolate and repro the issue\n\n## Contributing\n\n1. Fork it\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Added some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create new Pull Request\n\n## Running Tests\n\nThe existing tests can be run using [Mocha](http://visionmedia.github.io/mocha/) with the following command:\n\n```bash\nnpm test\n```\n\nYou can run individual tests with the following command:\n\n```bash\n./node_modules/.bin/mocha [path to test].js\n```\n\n### Integration Tests\n\nIn order to run the integration tests, you'll need to update the environment file with your valid SendGrid credentials. Start by making a live copy of the example:\n\n```bash\ncp .env.example .env.test\n```\n\nNext, open up `.env.test` and fill it in.  After you have updated the environment file with your credentials, you can run the suite using the following command:\n\n```bash\nnpm test\n```\n\n## License\n\nLicensed under the MIT License.\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/sendgrid/sendgrid-nodejs/issues"
  },
  "_id": "sendgrid@1.2.1",
  "dist": {
    "shasum": "613204b6246af6c0c21ef7fea82b966f6203cd9c"
  },
  "_from": "sendgrid@",
  "_resolved": "https://registry.npmjs.org/sendgrid/-/sendgrid-1.2.1.tgz"
}
